"""
Django settings generated by 'django-admin startproject' using Django 4.1.7

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url

if os.path.isfile('env.py'):
    import env

# Paths inside this project follow the pattern -> BASE_DIR / 'subdir'
BASE_DIR = Path(__file__).resolve().parent.parent

# Directory where templates files are
TEMPLATES_DIR = os.path.join(BASE_DIR, 'templates')

# Data stored into env.py
SECRET_KEY = os.environ.get('SECRET_KEY')

# To be switched from True to False before going to production
DEBUG = True

# List of allowed hosts
ALLOWED_HOSTS = ['my-own-blog.herokuapp.com', 'localhost']

# Required from Django 4.0
ALLOWED_ORIGINS = ['http://*.gitpod.io', 'https://*.gitpod.io', 'https://localhost', 'http://my-own-blog.herokuapp.com', 'https://my-own-blog.herokuapp.com']
CSRF_TRUSTED_ORIGINS = ALLOWED_ORIGINS.copy()

# cloudinary_storage goes before django.contrib.staticfiles, cloudinary after
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'cloudinary_storage',
    'django.contrib.staticfiles',
    'cloudinary',
    'blog',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'coding.urls'

# TEMPLATES_DIR has been set up right below BASE_DIR
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATES_DIR],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Web Services Gateway Interface is a standard for Python to work with servers
WSGI_APPLICATION = 'coding.wsgi.application'

# Postgres URL has been stored into env.py
DATABASES = {
    'default': dj_database_url.parse(os.environ.get('DATABASE_URL'))
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization settings
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files - like CSS, JavaScript, Images - settings
STATIC_URL = 'static/'
STATICFILES_STORAGE = 'cloudinary_storage.storage.StaticHashedCloudinaryStorage'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Pictures and other media settings
MEDIA_URL = '/media/'
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
